#!/usr/bin/env ruby

#
# Author:: Matt Ray (<matt@opscode.com>)
#
# Copyright:: 2011, Opscode, Inc <legal@opscode.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'json'
require 'yaml'

require 'spiceweasel'

options={'knife_options' => ''}

#process command line options
begin
  ARGV << "-h" if ARGV.empty?
  cli = Spiceweasel::CLI.new
  cli.parse_options
  DEBUG = cli.config[:debug]
  PARALLEL = cli.config[:parallel]
  SITEINSTALL = cli.config[:siteinstall]
  NOVALIDATION = cli.config[:novalidation]
rescue OptionParser::InvalidOption => e
  STDERR.puts e.message
  puts cli.opt_parser.to_s
  exit(-1)
end

if cli.config[:knifeconfig]
  options['knife_options'] = " -c " + cli.config[:knifeconfig]
end

if cli.config[:extractlocal]
  input = Spiceweasel::DirectoryExtractor.parse_objects
else
  begin
    file = ARGV.last
    STDOUT.puts "DEBUG: file: #{file}" if cli.config[:debug]
    if (file.end_with?(".yml"))
      input = YAML.load_file ARGV.last
    elsif (file.end_with?(".json"))
      input = JSON.parse(File.read(ARGV.last))
    else
      STDERR.puts "ERROR: Unknown file type, please use a file ending with either '.json' or '.yml'."
      exit(-1)
    end
  rescue JSON::ParserError => e
    STDERR.puts e.message
    STDERR.puts "ERROR: Parsing error in the infrastructure file provided."
    exit(-1)
  rescue Exception
    STDERR.puts "ERROR: No infrastructure .json or .yml file provided."
    puts cli.opt_parser.to_s
    exit(-1)
  end
end

create = String.new()
delete = String.new()

cookbook_list = Spiceweasel::CookbookList.new(input['cookbooks'], options)
environment_list = Spiceweasel::EnvironmentList.new(input['environments'], cookbook_list, options)
role_list = Spiceweasel::RoleList.new(input['roles'], environment_list, cookbook_list, options)
data_bag_list = Spiceweasel::DataBagList.new(input['data bags'], options)
node_list = Spiceweasel::NodeList.new(input['nodes'], cookbook_list, environment_list, role_list, options)

create += cookbook_list.create
create += environment_list.create
create += role_list.create
create += data_bag_list.create
create += node_list.create

delete += cookbook_list.delete
delete += environment_list.delete
delete += role_list.delete
delete += data_bag_list.delete
delete += node_list.delete

#just print the knife commands, do not execute
#if cli.config[:dryrun]
if cli.config[:delete]
  puts delete unless delete.empty?
elsif cli.config[:rebuild]
  puts delete unless delete.empty?
  puts create unless create.empty?
else
  puts create unless create.empty?
end
#else
#eventually we will execute instead of printing knife commands
#puts "BAM!"
#end
